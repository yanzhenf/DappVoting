{"ast":null,"code":"import Web3 from \"web3\";\n\n// 定义一个函数，用于获取 Web3 实例\nconst getWeb3 = () => new Promise((resolve, reject) => {\n  // 监听页面加载完成事件\n  window.addEventListener(\"load\", async () => {\n    // 如果浏览器支持以太坊的以太币钱包 MetaMask\n    if (window.ethereum) {\n      // 创建一个 Web3 实例，使用 MetaMask 提供的 ethereum 对象\n      const web3 = new Web3(window.ethereum);\n      try {\n        // 请求用户授权连接到以太坊网络\n        await window.ethereum.enable();\n        // 授权成功，解析返回的 Web3 实例\n        resolve(web3);\n      } catch (error) {\n        // 如果用户拒绝了授权请求，则返回错误\n        reject(error);\n      }\n    }\n    // 如果浏览器中已经注入了旧版的 web3 对象\n    else if (window.web3) {\n      // 使用已注入的 web3 对象\n      const web3 = window.web3;\n      console.log(\"Injected web3 detected.\"); // 输出日志\n      resolve(web3);\n    }\n    // 如果没有检测到 MetaMask 或旧版 web3 对象，则连接到本地以太坊节点\n    else {\n      // 创建一个 HTTP Provider 对象，连接到本地以太坊节点\n      const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\");\n      // 创建一个 Web3 实例，使用本地节点提供的 provider\n      const web3 = new Web3(provider);\n      console.log(\"No web3 instance injected, using Local web3.\"); // 输出日志\n      resolve(web3);\n    }\n  });\n});\n\n// 导出获取 Web3 实例的函数\nexport default getWeb3;","map":{"version":3,"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","enable","error","console","log","provider","providers","HttpProvider"],"sources":["E:/eth_voting/Test/client/src/getWeb3.js"],"sourcesContent":["import Web3 from \"web3\";\n\n// 定义一个函数，用于获取 Web3 实例\nconst getWeb3 = () =>\n    new Promise((resolve, reject) => {\n      // 监听页面加载完成事件\n      window.addEventListener(\"load\", async () => {\n        // 如果浏览器支持以太坊的以太币钱包 MetaMask\n        if (window.ethereum) {\n          // 创建一个 Web3 实例，使用 MetaMask 提供的 ethereum 对象\n          const web3 = new Web3(window.ethereum);\n          try {\n            // 请求用户授权连接到以太坊网络\n            await window.ethereum.enable();\n            // 授权成功，解析返回的 Web3 实例\n            resolve(web3);\n          } catch (error) {\n            // 如果用户拒绝了授权请求，则返回错误\n            reject(error);\n          }\n        }\n        // 如果浏览器中已经注入了旧版的 web3 对象\n        else if (window.web3) {\n          // 使用已注入的 web3 对象\n          const web3 = window.web3;\n          console.log(\"Injected web3 detected.\"); // 输出日志\n          resolve(web3);\n        }\n        // 如果没有检测到 MetaMask 或旧版 web3 对象，则连接到本地以太坊节点\n        else {\n          // 创建一个 HTTP Provider 对象，连接到本地以太坊节点\n          const provider = new Web3.providers.HttpProvider(\n              \"http://127.0.0.1:8545\"\n          );\n          // 创建一个 Web3 实例，使用本地节点提供的 provider\n          const web3 = new Web3(provider);\n          console.log(\"No web3 instance injected, using Local web3.\"); // 输出日志\n          resolve(web3);\n        }\n      });\n    });\n\n// 导出获取 Web3 实例的函数\nexport default getWeb3;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;;AAEvB;AACA,MAAMC,OAAO,GAAGA,CAAA,KACZ,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/B;EACAC,MAAM,CAACC,gBAAgB,CAAC,MAAM,EAAE,YAAY;IAC1C;IACA,IAAID,MAAM,CAACE,QAAQ,EAAE;MACnB;MACA,MAAMC,IAAI,GAAG,IAAIR,IAAI,CAACK,MAAM,CAACE,QAAQ,CAAC;MACtC,IAAI;QACF;QACA,MAAMF,MAAM,CAACE,QAAQ,CAACE,MAAM,EAAE;QAC9B;QACAN,OAAO,CAACK,IAAI,CAAC;MACf,CAAC,CAAC,OAAOE,KAAK,EAAE;QACd;QACAN,MAAM,CAACM,KAAK,CAAC;MACf;IACF;IACA;IAAA,KACK,IAAIL,MAAM,CAACG,IAAI,EAAE;MACpB;MACA,MAAMA,IAAI,GAAGH,MAAM,CAACG,IAAI;MACxBG,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC,CAAC,CAAC;MACxCT,OAAO,CAACK,IAAI,CAAC;IACf;IACA;IAAA,KACK;MACH;MACA,MAAMK,QAAQ,GAAG,IAAIb,IAAI,CAACc,SAAS,CAACC,YAAY,CAC5C,uBAAuB,CAC1B;MACD;MACA,MAAMP,IAAI,GAAG,IAAIR,IAAI,CAACa,QAAQ,CAAC;MAC/BF,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC,CAAC,CAAC;MAC7DT,OAAO,CAACK,IAAI,CAAC;IACf;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEN;AACA,eAAeP,OAAO"},"metadata":{},"sourceType":"module"}